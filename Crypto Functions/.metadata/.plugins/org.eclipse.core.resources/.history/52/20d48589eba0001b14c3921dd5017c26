package Crypto;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import static java.nio.charset.StandardCharsets.UTF_8;

public class RSASignature {


	public static void sign(String plainText, PrivateKey privateKey, String fileName) throws Exception {
	    Signature privateSignature = Signature.getInstance("SHA256withRSA");
	    privateSignature.initSign(privateKey);
	    privateSignature.update(plainText.getBytes(UTF_8));
	    byte[] signature = privateSignature.sign();
	    saveSign(signature, fileName);
	    //return Base64.getEncoder().encodeToString(signature);
	}
	
	public static void saveSign(byte[] sign, String fileName) throws IOException {
		File file = new File(fileName);
        if (file.createNewFile()) {
            System.out.println("Encrypted File has been created.");
    	    try{      
    	        FileOutputStream fos = new FileOutputStream(fileName);
    	        fos.write(sign);   
    	        fos.close();
    	    }catch(Exception e){
    	    	System.out.println(e);
    	    }       
       }  
       else {
           System.out.println("Encryption file already exists.");
       }
	}
	
	public static byte[] readSign(String fileName) throws IOException {
		
		FileInputStream fin = new FileInputStream(fileName);
        byte[] textbyte = new byte[fin.available()];
        fin.read(textbyte);
        fin.close();
        System.out.println("RSA Signature File has been read...");
        return textbyte;
	}
	
	public static boolean verify(String plainText, String signFile, PublicKey publicKey) throws Exception {
	    Signature publicSignature = Signature.getInstance("SHA256withRSA");
	    publicSignature.initVerify(publicKey);
	    publicSignature.update(plainText.getBytes(UTF_8));

	    byte[] signatureBytes = Base64.getDecoder().decode(readSign(signFile));

	    return publicSignature.verify(signatureBytes);
	}
	
	public void createRSAKey(String filePKey, String fileSKey) throws Exception{
		
		File filePK = new File(filePKey);
		File fileSK = new File(fileSKey);
		
		RSASignature rsaSign = new RSASignature();
	    
	    //Saving or Retrieving key
        if (filePK.createNewFile() && fileSK.createNewFile()) {
        	SecureRandom securerandom = new SecureRandom();
    		KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
    		keyPairGenerator.initialize(1024, securerandom);
    		KeyPair keyPair = keyPairGenerator.genKeyPair();
            rsaSign.saveKeyPair(keyPair, filePKey, fileSKey);
        }
        
	}
	
	// save keypair
	public void saveKeyPair(KeyPair keyPair, String filePKey, String fileSKey) throws IOException {
		PrivateKey privateKey = keyPair.getPrivate();
		PublicKey publicKey = keyPair.getPublic();
 
		// Store Public Key.
		X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(
				publicKey.getEncoded());
		FileOutputStream fos = new FileOutputStream(filePKey);
		fos.write(x509EncodedKeySpec.getEncoded());
		fos.close();
 
		// Store Private Key.
		PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(
				privateKey.getEncoded());
		fos = new FileOutputStream(fileSKey);
		fos.write(pkcs8EncodedKeySpec.getEncoded());
		fos.close();
		System.out.println("RSA Signature Public and private Key File has been created...");
	}
	
	public KeyPair loadKeyPair(String filePKey, String fileSKey) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException{
		// Read Public Key.
		File filePublicKey = new File(filePKey);
		FileInputStream fis = new FileInputStream(filePKey);
		byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
		fis.read(encodedPublicKey);
		fis.close();
 
		// Read Private Key.
		File filePrivateKey = new File(fileSKey);
		fis = new FileInputStream(fileSKey);
		byte[] encodedPrivateKey = new byte[(int) filePrivateKey.length()];
		fis.read(encodedPrivateKey);
		fis.close();
 
		// Generate KeyPair.
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(encodedPublicKey);
		PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);
 
		PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(encodedPrivateKey);
		PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);
 
		return new KeyPair(publicKey, privateKey);
	}
	
	public void startRSASignature() throws Exception {
		RSASignature rsaSign = new RSASignature();
		rsaSign.createRSAKey("RSA_Signature" + "_PublicKey.txt", "RSA_Signature" +  "_PrivateKey.txt");
		KeyPair kpair = rsaSign.loadKeyPair("RSA_Signature" + "_PublicKey.txt", "RSA_Signature" + "_PrivateKey.txt");
		String plainText = AESMode.readLines("Message.txt");
		sign(plainText, kpair.getPrivate(), "RSA_Signature" + "_File.txt");
		//Let's check the signature
		boolean isCorrect = verify(plainText, "RSA_Signature" + "_File.txt", kpair.getPublic());
		System.out.println("Signature correct: " + isCorrect);
	}
}
